// Kh·ªüi t·∫°o k·∫øt n·ªëi MQTT
let mqttClient = null;
const topics = {
    sensorData1: 'Lab001/sensors/data',
    sensorData2: 'A4002/sensors/data'
};

function initializeMQTT() {
    const broker = "fd553ba641bf43729bad8a7af8400930.s1.eu.hivemq.cloud";
    const port = 8884;
    const clientID = "web_" + Math.floor(Math.random() * 100000);
    const username = "NCKH2025";
    const password = "Manh09092003";

    mqttClient = new Paho.MQTT.Client(broker, port, clientID);

    mqttClient.onConnectionLost = (responseObject) => {
        if (responseObject.errorCode !== 0) {
            console.log("M·∫•t k·∫øt n·ªëi: " + responseObject.errorMessage);
            updateMQTTStatus("M·∫•t k·∫øt n·ªëi", "error");
            setTimeout(initializeMQTT, 5000);
        }
    };

    mqttClient.onMessageArrived = async (message) => {
        console.log("Nh·∫≠n d·ªØ li·ªáu t·ª´ topic:", message.destinationName);
        try {
            const sensorData = JSON.parse(message.payloadString);
            processSensorData(message.destinationName, sensorData);
        } catch (e) {
            console.error("L·ªói x·ª≠ l√Ω d·ªØ li·ªáu c·∫£m bi·∫øn:", e);
        }
    };

    mqttClient.connect({
        useSSL: true,
        userName: username,
        password: password,
        onSuccess: () => {
            console.log("Connected to MQTT broker");
            updateMQTTStatus("ƒê√£ k·∫øt n·ªëi", "success");
            mqttClient.subscribe(topics.sensorData1);
            mqttClient.subscribe(topics.sensorData2);
            console.log("Subscribed to:", topics.sensorData1, topics.sensorData2);
        },
        onFailure: (error) => {
            console.log("K·∫øt n·ªëi th·∫•t b·∫°i:", error.errorMessage);
            updateMQTTStatus("K·∫øt n·ªëi th·∫•t b·∫°i", "error");
            setTimeout(initializeMQTT, 5000);
        }
    });
}

// Ch·ªânh s·ª≠a h√†m processSensorData ƒë·ªÉ s·ª≠a l·ªói khi g·ªçi triggerAlert
async function processSensorData(topic, sensorData) {
    console.log("D·ªØ li·ªáu c·∫£m bi·∫øn:", sensorData);
    // ƒê·∫£m b·∫£o ƒë√£ c√≥ ng∆∞·ª°ng tr∆∞·ªõc khi so s√°nh
    const currentThresholds = thresholds; // S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c thresholds

    if (topic === topics.sensorData1) {
        const CO = sensorData.Lab001CO;
        const H2 = sensorData.Lab001H2;
        const NH3 = sensorData.Lab001NH3;
        console.log("Lab001CO:", CO, "Lab001H2:", H2, "Lab001NH3:", NH3);

        // Ki·ªÉm tra ng∆∞·ª°ng
        console.log("Ng∆∞·ª°ng hi·ªán t·∫°i:", currentThresholds);
        if (CO > currentThresholds.Lab001CO) {
            console.warn(`C·∫£nh b√°o: Lab001CO v∆∞·ª£t ng∆∞·ª°ng! (${CO} > ${currentThresholds.Lab001CO})`);
            triggerAlert('CO', CO, currentThresholds.Lab001CO, 'Lab001');
            alert(`C·∫£nh b√°o: Lab001CO v∆∞·ª£t ng∆∞·ª°ng! (${CO} > ${currentThresholds.Lab001CO})`);
        }
        if (H2 > currentThresholds.Lab001H2) {
            console.warn(`C·∫£nh b√°o: Lab001H2 v∆∞·ª£t ng∆∞·ª°ng! (${H2} > ${currentThresholds.Lab001H2})`);
            triggerAlert('H2', H2, currentThresholds.Lab001H2, 'Lab001');
            alert(`C·∫£nh b√°o: Lab001H2 v∆∞·ª£t ng∆∞·ª°ng! (${H2} > ${currentThresholds.Lab001H2})`);
        }
        if (NH3 > currentThresholds.Lab001NH3) {
            console.warn(`C·∫£nh b√°o: Lab001NH3 v∆∞·ª£t ng∆∞·ª°ng! (${NH3} > ${currentThresholds.Lab001NH3})`);
            triggerAlert('NH3', NH3, currentThresholds.Lab001NH3, 'Lab001');
            alert(`C·∫£nh b√°o: Lab001NH3 v∆∞·ª£t ng∆∞·ª°ng! (${NH3} > ${currentThresholds.Lab001NH3})`);
        }
    }
    else if (topic === topics.sensorData2) {
        const CO = sensorData.A4002CO;
        const H2 = sensorData.A4002H2;
        const NH3 = sensorData.A4002NH3;
        console.log("A4002CO:", CO, "A4002H2:", H2, "A4002NH3:", NH3);

        // Ki·ªÉm tra ng∆∞·ª°ng
        console.log("Ng∆∞·ª°ng hi·ªán t·∫°i:", currentThresholds);
        if (CO > currentThresholds.A4002CO) {
            console.warn(`C·∫£nh b√°o: A4002CO v∆∞·ª£t ng∆∞·ª°ng! (${CO} > ${currentThresholds.A4002CO})`);
            triggerAlert('CO', CO, currentThresholds.A4002CO, 'A4002');
        }
        if (H2 > currentThresholds.A4002H2) {
            console.warn(`C·∫£nh b√°o: A4002H2 v∆∞·ª£t ng∆∞·ª°ng! (${H2} > ${currentThresholds.A4002H2})`);
            triggerAlert('H2', H2, currentThresholds.A4002H2, 'A4002');
        }
        if (NH3 > currentThresholds.A4002NH3) {
            console.warn(`C·∫£nh b√°o: A4002NH3 v∆∞·ª£t ng∆∞·ª°ng! (${NH3} > ${currentThresholds.A4002NH3})`);
            triggerAlert('NH3', NH3, currentThresholds.A4002NH3, 'A4002');
        }
    }
}

// H√†m l·∫•y ng∆∞·ª°ng t·ª´ API
let thresholds = {
    Lab001CO: 500,
    Lab001H2: 500,
    Lab001NH3: 500,
    A4002CO: 400,
    A4002H2: 600,
    A4002NH3: 500
};

async function fetchThresholds() {
    try {
        const response = await fetch("http://localhost/routes/getThreshold.php");
        const data = await response.json();

        if (data.success) {
            thresholds = data.data;
            console.log("Ng∆∞·ª°ng c·∫£m bi·∫øn c·∫≠p nh·∫≠t:", thresholds);
            return thresholds;
        } else {
            console.error("L·ªói khi l·∫•y ng∆∞·ª°ng:", data.message);
        }
    } catch (error) {
        console.error("L·ªói k·∫øt n·ªëi API:", error);
    }
    return thresholds; // Tr·∫£ v·ªÅ gi√° tr·ªã hi·ªán c√≥ n·∫øu l·ªói
}
// H√†m l∆∞u c·∫£nh b√°o v√†o MySQL
async function saveAlertToDatabase(location, gasType, value, threshold, severity) {
    try {
        // X√°c ƒë·ªãnh sensor_id t·ª´ location v√† gasType
        const sensor_id = `${location}${gasType}`;
        
        // T·∫°o message
        const message = `N·ªìng ƒë·ªô ${gasType} v∆∞·ª£t qu√° ng∆∞·ª°ng: ${value}ppm`;
        
        // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒëi
        const alertData = {
            sensor_id: sensor_id,
            alert_type: 'n·ªìng ƒë·ªô kh√≠ cao',
            severity: severity,
            message: message,          
        };
        
        // G·ªçi API ƒë·ªÉ l∆∞u c·∫£nh b√°o
        const response = await fetch('http://localhost/routes/saveAlert.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(alertData),
            credentials: 'omit' // Ho·∫∑c 'include' n·∫øu c·∫ßn cookie
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log(`ƒê√£ l∆∞u c·∫£nh b√°o ${sensor_id} v√†o c∆° s·ªü d·ªØ li·ªáu`);
        } else {
            console.error('L·ªói khi l∆∞u c·∫£nh b√°o:', result.message);
        }
    } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi API saveAlert:', error);
    }
}

// H√†m x·ª≠ l√Ω c·∫£nh b√°o
function triggerAlert(gasType, value, threshold, location) {
    // X√°c ƒë·ªãnh location n·∫øu kh√¥ng ƒë∆∞·ª£c truy·ªÅn v√†o
    if (!location) {
        // X√°c ƒë·ªãnh location d·ª±a tr√™n topic hi·ªán t·∫°i v√† gasType
        if (gasType.includes('Lab001')) {
            location = 'Lab001';
        } else if (gasType.includes('A4002')) {
            location = 'A4002';
        }
    }
    
    // X√°c ƒë·ªãnh m·ª©c ƒë·ªô nghi√™m tr·ªçng d·ª±a tr√™n % v∆∞·ª£t ng∆∞·ª°ng
    let severity;
    const percentOverThreshold = (value / threshold) * 100;
    
    if (percentOverThreshold >= 150) {
        severity = 'high';
    } else {
        severity = 'medium';
    } 
    
    // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
    const alertMessage = `üö® C·∫¢NH B√ÅO: ${gasType} t·∫°i ${location} v∆∞·ª£t ng∆∞·ª°ng (${value} > ${threshold})`;
    showNotification(alertMessage);
    
    // L∆∞u c·∫£nh b√°o v√†o c∆° s·ªü d·ªØ li·ªáu
    saveAlertToDatabase(location, gasType, value, threshold, severity);
}

// H√†m hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message) {
    console.log(message);
    const notification = document.createElement('div');
    notification.className = 'alert-toast';
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 5000);
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i MQTT
function updateMQTTStatus(message, type) {
    const statusElement = document.getElementById("mqttStatus");
    if (!statusElement) return;

    statusElement.textContent = message;
    statusElement.className = `status-value ${type === "success" ? "status-on" : "status-off"}`;
}

export { initializeMQTT, fetchThresholds, saveAlertToDatabase };
